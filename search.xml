<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux基础</title>
      <link href="/2022/04/11/Linux%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/04/11/Linux%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Redhat认证系列之红帽认证系统管理员(RHCSA)</title>
      <link href="/2022/04/09/Redhat/"/>
      <url>/2022/04/09/Redhat/</url>
      
        <content type="html"><![CDATA[<h4 id="RHCSA考试"><a href="#RHCSA考试" class="headerlink" title="RHCSA考试"></a>RHCSA考试</h4><p>RHCSA的考试时间为3个钟头，考试环境有两台虚拟机，我这里用的是8版本的题目，RHCE8 版本和以往相比变动有还是比较大的。</p><hr><h3 id="在node1-net2-example-com-上做题"><a href="#在node1-net2-example-com-上做题" class="headerlink" title="在node1.net2.example.com 上做题"></a>在node1.net2.example.com 上做题</h3><h4 id="配置node1主机信息，使其具有以下网络配置："><a href="#配置node1主机信息，使其具有以下网络配置：" class="headerlink" title="配置node1主机信息，使其具有以下网络配置："></a>配置node1主机信息，使其具有以下网络配置：</h4><blockquote><p>主机名：node1.net2.example.com<br>IP地址：172.24.2.10<br>子网掩码：255.255.255.0<br>网关：172.24.2.254<br>名称服务器：172.24.2.254</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">hostname  (查看主机名与题目要求不同，用hostnamectl命令设置即可)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">hostnamectl set-hostname node1.net2.example.com (设置为题目要求的主机名)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">hostname (验证是否已经主机名已经设置为题目要求的主机名)</span></span><br></pre></td></tr></table></figure><ol><li>tui字符界面图形模式配置   输入命令nmtui即可<img src="https://s1.ax1x.com/2022/04/10/LAitw4.png" alt="LAitw4.png"></li></ol><p>2.进入配置界面 <img src="https://s1.ax1x.com/2022/04/10/LAkVaQ.png" alt="LAkVaQ.png"><br>Edit a connection:编辑一个连接，可以添加或删除网络配置<br>Activate a connection:激活一个连接，可以启用或者禁用网络配置<br>Set system hostname:设置系统hostname<br>3. 选择网络接口 Edit编辑<img src="https://s1.ax1x.com/2022/04/10/LAEx54.png" alt="LAEx54.png"><br>4.  先把Automatic改成manual，再把光标定位到show上面回车键[<img src="https://s1.ax1x.com/2022/04/10/LAVURs.png" alt="LAVURs.png"><br>5.  再进行相关配置， 掩码直接在 IP地址后面添加  不然默认32位的，键盘操作：比如Adress后面的SHOW，把光标定位SHOW回车即可出现 IP地址配置，然后把 Automatically connect(自动连接)和Available to all users(适用于所有用户) 给X上(按空格键)，最后OK回到主界面<img src="https://s1.ax1x.com/2022/04/10/LAZr6I.png" alt="LAZr6I.png"><br>6.  光标右移，找到 Back 回车<img src="https://s1.ax1x.com/2022/04/10/LAZONF.png" alt="LAZONF.png"><br>7.  最后 quit 退出<img src="https://s1.ax1x.com/2022/04/10/LAZx39.png" alt="LAZx39.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">nmcli connection show 查看网卡</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">nmcli connection up “你的网卡”</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ip a 查看你的ip地址是否设置成题目要求的</span></span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/04/10/LAu62Q.png" alt="LAu62Q.png"></p><h4 id="配置你的系统以使用默认存储库"><a href="#配置你的系统以使用默认存储库" class="headerlink" title="配置你的系统以使用默认存储库:"></a>配置你的系统以使用默认存储库:</h4><blockquote><p>在 node1 主机上配置 yum 仓库，并启动默认存储库<br>仓库地址：<a href="http://content.example.com/rhel8.2/x86_64/dvd/BaseOS">http://content.example.com/rhel8.2/x86_64/dvd/BaseOS</a> 和<br><a href="http://content.example.com/rhel8.2/x86_64/dvd/AppStream">http://content.example.com/rhel8.2/x86_64/dvd/AppStream</a><br>将以上两个存储库配置为系统的默认存储库。无需检查 GPG 签名</p></blockquote><p>解题步骤：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cd</span> /etc/yum.repos.d 切换到yum仓库的配置文件</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">ls</span> 看一看目录下面有没有文件，有文件的话 <span class="built_in">mv</span> * /home/</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">vim rhcsa.repo (只要以repo后缀结尾的就可以我这里以rhcsa为例子)</span></span><br><span class="line">[baseos]</span><br><span class="line">name=baseos </span><br><span class="line">baseurl=http://content.example.com/rhel8.2/x86_64/dvd/BaseOS (这里写仓库地址，以实际地址为准)</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0 (无需检查GPG签名)</span><br><span class="line">[appstream]</span><br><span class="line">name=appstream</span><br><span class="line">baseurl=http://content.example.com/rhel8.2/x86_64/dvd/AppStream (同上)</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0 (无需检查GPG签名) </span><br></pre></td></tr></table></figure><ul><li><p>然后 ESC SHIFT加冒号 wq保存退出</p></li><li><p>题目验证:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">yum repolist all (显示有你配置的两个仓库<span class="built_in">id</span>和仓库名以及状态是enabled的就说明配置成功)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">yum list 显示软件包的信息</span> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/04/10/LAJlVJ.png" alt="LAJlVJ.png"></p><h4 id="调试-SELinux"><a href="#调试-SELinux" class="headerlink" title="调试 SELinux"></a>调试 SELinux</h4><blockquote><p>非标准端口 82 上运行的 WEB 服务器在提供内容时遇到问题。根据需要调试并解决问题，<br>并使其满足以下条件：<br>系统上的 web 服务器能够提供 &#x2F;var&#x2F;www&#x2F;html 中所有现在有的 html 文件（注意：不要删除或者<br>其他方式改动现有的文件内容）<br>Web 服务器通过 82 端口访问<br>Web 服务器在系统启动时自动启动</p></blockquote></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">systemctl restart httpd (使用systemctl 命令重启 httpd.service。发现重启 httpd 服务报错)</span></span><br><span class="line">通过 systemctl restart httpd 命令的报错结果来看，使用 systemctl status httpd 和 journalctl -xe 命令可以查询报错的详细信息</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">journalctl -xe</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过查询信息得出，使用 semanage port -a -t PORT_TYPE -p tcp 82 可以解决报错</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">semanage port -l | grep http (使用 semanage 命令查找适合端口 82/TCP 的端口类型)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">semanage port -a -t http_port_t -p tcp 82 (使用 semanage 命令为端口 82/TCP 分配 http_port_t 类型)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">systemctl restart httpd (使用 systemctl 命令重启 httpd.service 服务。此命令应该会成功)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">systemctl status httpd (查询 httpd 服务状态)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">curl 172.24.2.10:82 检查你现在是否可以访问在端口 82/TCP 上运行的 Web 服务器。使用 curl 命令从 node1 访问Web 服务</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">firewall-cmd --permanent --add-port=82/tcp (在node1上，打开防火墙上的端口 82/TCP，使用 firewall-cmd 命令，在 node1 的防火墙默认区域的永久配置中打开端口 82/TCP</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">firewall-cmd --reload (在 node1 上激活防火墙更改)</span></span><br><span class="line">最后在node2和物理机分别curl一下访问web服务，验证能不能访问成功</span><br></pre></td></tr></table></figure><h4 id="创建用户账户和配置用户账户"><a href="#创建用户账户和配置用户账户" class="headerlink" title="创建用户账户和配置用户账户"></a>创建用户账户和配置用户账户</h4><blockquote><p>创建下列用户、用户组，并按要求完成设置：<br>创建名为 sysmgrs 的阻<br>创建用户 natasha，其作为次要组从属于 sysmgrs<br>创建用户 harry，其作为次要组从属于 sysmgrs<br>创建用户 sarah ，其无权访问系统上的交互式 shell，且不是 sysmgrs 组的成员<br>natasha、harry、sarah 的密码是 ablerate</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">groupadd sysmgrs (创建sysmgrs组)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> useradd -G sysmgrs natasha (创建 natasha和harry用户,并设置附属组为 sysmgrs)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">useradd -G sysmgrs harry</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">useradd -s /sbin/nologin sarah (创建用户sarah,并执行shell类型为/sbin/nologin)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">echo</span> ablerate | passwd --stdin natasha (设置用户密码)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">echo</span> ablerate | passwd --stdin harry (设置用户密码)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">echo</span> ablerate | passwd --stdin sarah (设置用户密码)</span></span><br></pre></td></tr></table></figure><h4 id="配置-cron-作业"><a href="#配置-cron-作业" class="headerlink" title="配置 cron 作业"></a>配置 cron 作业</h4><blockquote><p>配置 cron 作业，该作业每隔 1 分钟执行以下命令：logger “hello rhcsa”，以用户natasha身份行<br>配置 cron 作业，该作业每隔 1 分钟执行以下命令：logger “hello rhcsa”，以用户natasha身份行<br>配置 cron 作业，每天的 14:23 分执行以下命令：logger “hello rhcsa”，以用户natasha身份运行</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">crontab -e -u natasha (以natasha用户的身份去编辑cron作业)</span></span><br><span class="line">*/2 * * * * logger &quot;hello rhcsa&quot; (每隔两分钟执行) </span><br><span class="line">*/1 * * * * logger &quot;hello rhcsa&quot; (每隔一分钟执行)</span><br><span class="line">23 14 * * * logger &quot;hello rhcsa&quot; (每天的14点23分执行)</span><br><span class="line">* * * * * 对应的是 分 时 日 月 周</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">crontab -l -u natasha (验证是否有题目中要求的cron作业)</span></span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/04/11/LZ9m59.png" alt="LZ9m59.png"></p><h4 id="创建协作目录"><a href="#创建协作目录" class="headerlink" title="创建协作目录"></a>创建协作目录</h4><blockquote><p>创建具有以下特征的协作目录 &#x2F;home&#x2F;managers 要求如下:<br>&#x2F;home&#x2F;managers 的组用权是 sysmgrs<br>目录应当可被 sysmgrs 的成员读取。写入和访问，但任何其他用户不具这些权限。（当然，root      用户有权访问系统上的所有文件和目录）<br>&#x2F;home&#x2F;managers 中创建的文件自动将组所有权设置到 sysmgrs 组</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">mkdir</span> /home/managers (创建目录)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">chgrp</span> sysmgrs /home/managers (设置/home/managers所有组为sysmgrs组)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">chmod</span> g+s /home/managers (给目录增加特殊权限)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">chmod</span> u=rwx,g=rwx,o=--- /home/managers (并设置所有者、所属组、其他用户的权限)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">touch</span> /home/managers/file1 (验证权限)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ll /home/managers/file1</span> </span><br><span class="line">使用root用户在 /home/managers 目录下创建file1文件，因为 /home/managers 添加了 sgid 特殊权限，所以 虽然是root用户创建的file1，但是file1的所属组并不是root组，而是继承了</span><br><span class="line">/home/managers目录，所属组为sysmgrs组</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>哈哈👋🏻</title>
      <link href="/2022/04/09/%E5%93%88%E5%93%88/"/>
      <url>/2022/04/09/%E5%93%88%E5%93%88/</url>
      
        <content type="html"><![CDATA[<p>大家好，我是Hanws😂,你们可能是通过我的网名 [被驴踢过的脑袋还好使吗] 认识我的，我的特点有:</p><ul><li>理想主义</li><li>有点努力</li><li>会点技术</li><li>接受过义务教育的义务教育漏网之鱼</li><li>LSP</li></ul><p>这是我第一次开始写博客，之前有这个想法但是一直没有实施，这个博客是由<a href="https://hexo.io/">Hexo</a>搭建出来的，它是一个快速、简单、强大的博客框架。</p><p>为什么非要写博客？唉，就是玩！😅  大概是因为这样:</p><blockquote><p>我不是程序员，也不是设计师，我只是恰好有一些想法和一台电脑。</p></blockquote><p>没错就是🧠里经常产生想法，无论是技术的还是生活的，也无论是熟悉的领域还是，不熟悉的领域的，时间久了，有些想法还是会重复出现，所以尝试着将这些想法记录下来，可能是一种解脱。不过，以后我会经常来记录一些技术学习总结，以及我自己的一些思考，小到技术大到宇宙。</p><hr><p>希望大佬轻点喷😣</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
